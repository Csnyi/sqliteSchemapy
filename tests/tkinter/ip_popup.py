import customtkinter as ctk
import ipaddress
import random  # Szimul√°lt h√°l√≥zati hib√°hoz

def wpos_center(w, h, root):
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    window_width = w
    window_height = h
    pos_x = (screen_width // 2) - (window_width // 2)
    pos_y = (screen_height // 2) - (window_height // 2)
    root.geometry(f"{window_width}x{window_height}+{pos_x}+{pos_y}")

ctk.set_appearance_mode("dark")  # Modes: "System" (standard), "Dark", "Light"
ctk.set_default_color_theme("tkthemes/breeze.json")  # Themes: "blue" (standard), "green", "dark-blue"

class IPInputDialog(ctk.CTkToplevel):
    def __init__(self, master=None, title="IP C√≠m Bek√©r√©se"):
        super().__init__(master)
        self.title(title)
        
        wpos_center(300, 150, self)
        self.resizable(False, False)

        # F≈ë c√≠mke (itt jelenik meg az IP k√©r√©s √©s a hiba√ºzenet is)
        self.label = ctk.CTkLabel(self, text="Adjon meg egy IP-c√≠met:")
        self.label.pack(pady=10)

        # IP beviteli mez≈ë
        self.entry = ctk.CTkEntry(self)
        self.entry.pack(pady=5)
        self.entry.bind("<KeyRelease>", self.validate_ip)

        # OK gomb
        self.ok_button = ctk.CTkButton(self, text="OK", state="disabled", command=self.on_ok)
        self.ok_button.pack(pady=10)

        # ENTER gomb hozz√°rendel√©se az OK funkci√≥hoz
        self.bind("<Return>", self.on_ok) 

        self.result = None
        self.grab_set()  # Az ablak mod√°lis lesz

    def validate_ip(self, event=None):
        """√ârv√©nyes√≠ti az IP-c√≠met."""
        ip = self.entry.get().strip()
        try:
            ipaddress.ip_address(ip)
            self.ok_button.configure(state="normal")
            self.label.configure(text="Adjon meg egy IP-c√≠met:", text_color="#4b8899")  # Alap√©rtelmezett sz√∂veg vissza√°ll√≠t√°sa
        except ValueError:
            self.ok_button.configure(state="disabled")

    def show_error(self, message):
        """Megjelen√≠ti a hiba√ºzenetet a label-ben piros sz√≠nnel."""
        self.label.configure(text=message, text_color="red")

    def on_ok(self, event=None):
        """Az OK gomb megnyom√°sakor valid√°lja az IP-t √©s ellen≈ërzi a h√°l√≥zatot."""
        ip = self.entry.get().strip()

        # H√°l√≥zati ellen≈ërz√©s
        if not network_check(ip):
            self.show_error("‚ùå H√°l√≥zati hiba! Pr√≥b√°ljon meg m√°sik IP-t.")
            return  # Ne z√°rja be az ablakot, hadd m√≥dos√≠tsa az IP-t

        self.result = ip  # Ha sikeres, elmentj√ºk az eredm√©nyt
        self.destroy()  # Ablak bez√°r√°sa

def ask_for_ip():
    """IP-c√≠m bek√©r√©se a felhaszn√°l√≥t√≥l, am√≠g nem siker√ºl kapcsol√≥dni."""
    while True:
        app.update()  # A f≈ëablak friss√≠t√©se a megjelen√≠t√©shez

        dialog = IPInputDialog()
        dialog.wait_window()  # Megv√°rjuk, m√≠g bez√°r√≥dik

        if not dialog.result:  
            print("‚ùå Nincs IP megadva, kil√©p√©s...")
            app.destroy()  # Kil√©p√ºnk az eg√©sz alkalmaz√°sb√≥l
            return None  

        return dialog.result  # Visszaadja az √©rv√©nyes IP-t

def network_check(ip):
    """H√°l√≥zati kapcsolat ellen≈ërz√©se (szimul√°lt)."""
    return random.choice([True, False])  # V√©letlenszer≈±en siker vagy hiba

# üî• F≈ë program
app = ctk.CTk()

wpos_center(640, 480, app)

app.withdraw()  # A f≈ëablak elrejt√©se

ip = ask_for_ip()

if ip:
    app.deiconify()  # Ha siker√ºlt, megjelen√≠tj√ºk a f≈ëablakot
    print(f"‚úÖ Sikeres kapcsolat az IP-hez: {ip}")
    app.mainloop()
else:
    print("üö™ Kil√©p√©s...")
